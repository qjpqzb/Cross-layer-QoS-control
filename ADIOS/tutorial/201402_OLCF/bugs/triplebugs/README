This example has 3 bugs.

It writes a 1D double array, named temperature, from each process, so that a second dimension is added to the output array, with each process writing to a position of its own MPI rank. So that if we run on 4 processes, we get:

$ mpirun -np 4 ./write
$ bpls -l write.bp -d temperature -n 10
  double   temperature  {4, 10} = 0 / 39 / 19.5 / 11.5434 
    (0,0)    0 1 2 3 4 5 6 7 8 9 
    (1,0)    10 11 12 13 14 15 16 17 18 19 
    (2,0)    20 21 22 23 24 25 26 27 28 29 
    (3,0)    30 31 32 33 34 35 36 37 38 39 


Problems

I. It does not compile. 

Are we using the right compiler?
Are we using the corresponding ADIOS library/module?
Are we linking with all the necessary dependencies to ADIOS?

Hint: Check how the tutorial examples build with ADIOS. It has an 'adios_config' utility to create the compile/linker options for all possible uses (parallel / seq, write+read / read-only, Fortran / C, old read API)



II. Now it compiles but it aborts immediately. 

$ mpirun -np 1 ./write

on Chester:
Rank 0 [Sat Feb  8 15:31:02 2014] [c0-0c2s4n2] Fatal error in PMPI_Comm_rank: Invalid communicator, error stack:
PMPI_Comm_rank(108): MPI_Comm_rank(comm=0xb, rank=0x7fffffffa3bc) failed
PMPI_Comm_rank(66).: Invalid communicator

on Rhea:
write:7993 terminated with signal 11 at PC=446e6c SP=7fff0a992540.  Backtrace:
./write(futils_fstr_to_cstr+0x2c)[0x446e6c]


Hint: check that calls to ADIOS conform to the current ADIOS API. There has been some changs to calls and old codes abort (if we are lucky...) ADIOS provides a Fortran module to enforce correct syntax. Check out how the first tutorial example uses that. 

The Fortran API is documented in the User's Manual, but one can look at it in 
src/core/adiosf_write_mod.f90 and adiosf_read_mod.F90 of the ADIOS source. In our case in
$(ADIOS_DIR)/adios-1.6.0/src/core/adiosf_write_mod.f90



III. The final problem is that when it runs, we get this error message:

ERROR: MPI method, rank 0: size of buffered data exceeds pg bound.
File is corrupted. Need to enlarge group size in adios_group_size().
Group size=593, offset at end of variable buffer=597


Hint: The most unconventional thing in ADIOS is that one has to declare how many bytes one is goint to write in the next step after adios_open() but before writing anything. It is a per-process calculation, not the total size. 

Hint: 'pg' stands for Process Group, it is the contiguous chunk bytes written by one process in one step. If that is bigger than what was expected at the beginning of the write, it will overlap with other pgs and corrupt the file. 


