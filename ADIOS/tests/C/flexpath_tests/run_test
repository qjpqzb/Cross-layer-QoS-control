#!/bin/bash

reader_prog="reader"
writer_prog="writer"
qflag=no;
transport="flx"
timeout="60"
nr="2"
nw="2"

usage() 
{ 
  cat << EO 
        Usage: $PROGNAME [options] 
               $PROGNAME -o <version> -c 

	Run a test under flexpath_tests.
        

        Options: 
EO
  cat <<EO | column -s\& -t 
        -h|--help & show this output 
	-r <name> & name of reader-side program
	-w <name> & name of writer-side program
	-n <count> & number of nodes to run both sides
	-nw <count> & number of nodes to run write side
	-nr <count> & number of nodes to run read side
	-q & be quiet
	-timeout <seconds> & timeout in seconds
	-t <transport> & ADIOS transport to use "flx" or ?
EO
} 

PROGNAME=${0##*/} 
SHORTOPTS="r:w:n:t:o:qh" 
LONGOPTS="nw:,nr:,help" 

ARGS=$(getopt -a -s bash --options $SHORTOPTS  \
  --longoptions $LONGOPTS --name $PROGNAME -- "$@" ) 

eval set -- "$ARGS" 

while [ $# -gt 0 ]
do
    case "$1" in
     -h|--help) 
         usage 
         exit 0 
         ;; 
    (-q) qflag=yes;;
    (-r) reader_prog="$2"; shift;;
    (-w) writer_prog="$2"; shift;;
    (-n) nw="$2"; nr="$2"; shift;;
    (--nw) nw="$2"; shift;;
    (--nr) nr="$2"; shift;;
    (-t) transport="$2"; shift;;
    (--timeout) timeout="$2"; shift;;
    (--) shift; break;;
    (-*) echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
    (*)  break;;
    esac
    shift
done

echo "NR is $nr NW is $nw"

# remove any lingering flexpath startup files
rm -f *writer_info.txt *writer_ready.txt *reader_info.txt *reader_ready.txt

# Spawn the reader
(mpirun -q -n $nr $reader_prog -t $transport 2>&1 1>/dev/null) & reader_pid=$!

# Spawn the writer
(mpirun -q -n $nw $writer_prog -t $transport 2>&1 1>/dev/null) & writer_pid=$!

# in the background, sleep for timeout secs then kill that processes
(sleep $timeout && kill -9 $reader_pid && kill -9 $writer_pid 2>/dev/null) & waiter=$!

# wait on our worker process and return the exitcode
wait $reader_pid
reader_exitcode=$?

# wait on our worker process and return the exitcode
wait $writer_pid
writer_exitcode=$?

# kill the waiter subshell, if it still runs
kill -9 $waiter 2>/dev/null
# 0 if we killed the waiter, cause that means the process finished before the waiter
finished_gracefully=$?

# wait for waiter so that we don't get a killed message
wait $waiter 2>/dev/null

exit_value=0
if [ "$writer_exitcode" -ne "0" ]; then
  echo "$writer_prog exited with error code $writer_exitcode"
  exit_value=1
fi
if [ "$reader_exitcode" -ne "0" ]; then
  echo "$reader_prog exited with error code $reader_exitcode"
  exit_value=1
fi
if [ "$finished_gracefully" -ne "0" ]; then
  echo "One or more processes had to be killed because of timeout"
  exit_value=1
fi

if [ $qflag != "yes" ]; then
  if [ $exit_value -eq "0" ]; then
     echo "TEST PASSED";
  else
     echo "TEST FAILED";
  fi
fi

exit $exit_value
